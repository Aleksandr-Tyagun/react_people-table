{"version":3,"sources":["helpers/api.ts","constants/index.ts","components/PersonRow.tsx","components/PeopleTable.tsx","components/PeoplePage.tsx","components/Navbar.tsx","components/HomePage.tsx","components/PageNotFound.tsx","App.tsx","index.tsx"],"names":["getPeople","a","fetch","response","json","PersonRow","person","name","sex","born","died","slug","fatherName","motherName","father","mother","personSlug","useParams","key","className","classNames","to","PeopleTable","history","useHistory","location","useLocation","searchParams","URLSearchParams","search","useState","get","sortBy","setSortBy","searchQuery","setSearchQuery","people","setPeople","useEffect","then","peopleFromServer","map","find","preparedPeopleList","filter","regExp","RegExp","match","sort","b","valueA","valueB","localeCompare","type","placeholder","value","onChange","e","currentTarget","set","push","toString","title","onClick","sortByName","PeoplePage","Navbar","role","aria-label","activeClassName","exact","HomePage","PageNotFound","App","from","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ebad3d0a.chunk.js","sourcesContent":["import { API_URL } from '../constants';\n\nexport const getPeople = async (): Promise<PersonFromServer[]> => {\n  const response = await fetch(`${API_URL}/people.json`);\n\n  return response.json();\n};\n","export const API_URL = 'https://mate-academy.github.io/react_people-table/api';\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useParams, Link } from 'react-router-dom';\n\ntype Props = {\n  person: Person;\n};\n\nconst PersonRow: React.FC<Props> = ({ person }) => {\n  const {\n    name,\n    sex,\n    born,\n    died,\n    slug,\n    fatherName,\n    motherName,\n    father,\n    mother,\n  } = person;\n\n  const { personSlug } = useParams();\n\n\n  return (\n    <tr\n      key={name}\n      className={classNames('has-text-white', {\n        'has-background-info': sex === 'm' && personSlug !== slug,\n        'has-background-danger': sex === 'f' && personSlug !== slug,\n        'has-background-warning': personSlug === slug,\n      })}\n    >\n      <td>\n        <Link to={`/people/${slug}`}>\n          {name}\n        </Link>\n      </td>\n      <td>\n        {sex}\n      </td>\n      <td>\n        {born}\n      </td>\n      <td>\n        {died}\n      </td>\n      <td>\n        {father ? (\n          <Link to={`/people/${father.slug}`}>\n            {fatherName}\n          </Link>\n        ) : (\n          <span className=\"has-text-black\">\n            {fatherName}\n          </span>\n        )}\n      </td>\n      <td>\n        {mother ? (\n          <Link\n            to={`/people/${mother.slug}`}\n\n          >\n            {motherName}\n          </Link>\n        ) : (\n          <span className=\"has-text-black\">\n            {motherName}\n          </span>\n        )}\n      </td>\n    </tr>\n  );\n};\n\nexport default PersonRow;\n","import React, { useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { getPeople } from '../helpers/api';\nimport PersonRow from './PersonRow';\n\ntype SortBy = keyof Person | null;\n\nconst PeopleTable = () => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  const [sortBy, setSortBy] = useState<SortBy>(searchParams.get('sortBy') as keyof Person);\n  const [searchQuery, setSearchQuery] = useState(searchParams.get('query') || '');\n  const [people, setPeople] = useState<Person[]>([]);\n  const headTitle = ['name', 'sex', 'born', 'died', 'motherName', 'fatherName'];\n\n  useEffect(() => {\n    getPeople().then(peopleFromServer => {\n      setPeople(peopleFromServer\n        .map(person => {\n          return {\n            ...person,\n            mother: peopleFromServer.find(({ name }) => name === person.motherName),\n            father: peopleFromServer.find(({ name }) => name === person.fatherName),\n          };\n        }));\n    });\n  }, []);\n\n  let preparedPeopleList: Person[] = people.filter(person => {\n    if (searchQuery) {\n      const regExp = new RegExp(searchQuery, 'i');\n\n      return person.name.match(regExp)\n        || (person.motherName && person.motherName.match(regExp))\n        || (person.fatherName && person.fatherName.match(regExp));\n    }\n\n    return person;\n  });\n\n  if (sortBy) {\n    preparedPeopleList = [...preparedPeopleList].sort((a, b) => {\n      const valueA = a[sortBy];\n      const valueB = b[sortBy];\n\n      if (typeof valueA === 'string' && typeof valueB === 'string') {\n        return valueB.localeCompare(valueA);\n      }\n\n      if (typeof valueA === 'number' && typeof valueB === 'number') {\n        return valueB - valueA;\n      }\n\n      return 0;\n    });\n  }\n\n  const handleSearchInput = (e: React.FormEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n\n    setSearchQuery(value);\n    searchParams.set('query', value);\n    history.push({\n      search: searchParams.toString(),\n    });\n  };\n\n  const handleSortBy = (sortByName: keyof Person) => {\n    setSortBy(sortByName);\n    searchParams.set('sortBy', sortByName);\n    history.push({\n      search: searchParams.toString(),\n    });\n  };\n\n  return (\n    <>\n      <input\n        className=\"input\"\n        type=\"text\"\n        placeholder=\"Find a person\"\n        value={searchQuery}\n        onChange={handleSearchInput}\n      />\n      <table className=\"table is-striped is-fullwidth\">\n        <thead>\n          <tr>\n            {headTitle.map((title: string) => (\n              <th key={title}>\n                <button\n                  className=\"button is-small\"\n                  type=\"button\"\n                  onClick={() => handleSortBy(title as keyof Person)}\n                >\n                  {sortBy === title && (\n                    <>*</>\n                  )}\n                  {title}\n                </button>\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {preparedPeopleList.map(person => (\n            <PersonRow\n              key={person.name}\n              person={person}\n            />\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default PeopleTable;\n","import React from 'react';\nimport PeopleTable from './PeopleTable';\n\nconst PeoplePage = () => {\n  return (\n    <section className=\"hero\">\n      <div className=\"hero-body\">\n        <div className=\"container\">\n          <h1 className=\"title\">\n            People page\n          </h1>\n          <PeopleTable />\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default PeoplePage;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst Navbar = () => {\n  return (\n    <nav className=\"navbar is-primary\" role=\"navigation\" aria-label=\"main navigation\">\n      <div className=\"navbar-menu\">\n        <div className=\"navbar-start\">\n          <NavLink\n            className=\"navbar-item\"\n            activeClassName=\"is-active\"\n            to=\"/\"\n            exact\n          >\n            Home\n          </NavLink>\n          <NavLink\n            className=\"navbar-item\"\n            activeClassName=\"is-active\"\n            to=\"/people\"\n            exact\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from 'react';\n\nconst HomePage = () => {\n  return (\n    <section className=\"hero\">\n      <div className=\"hero-body\">\n        <div className=\"container\">\n          <h1 className=\"title\">\n            Home page\n          </h1>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default HomePage;\n","import React from 'react';\n\nconst PageNotFound = () => {\n  return (\n    <section className=\"hero\">\n      <div className=\"hero-body\">\n        <div className=\"container\">\n          <h1 className=\"title\">\n            Page not found\n          </h1>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default PageNotFound;\n","import React from 'react';\n\nimport './App.css';\nimport {\n  HashRouter,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\n\nimport PeoplePage from './components/PeoplePage';\nimport Navbar from './components/Navbar';\nimport HomePage from './components/HomePage';\nimport PageNotFound from './components/PageNotFound';\n\nconst App = () => {\n  return (\n    <HashRouter>\n      <Navbar />\n      <Switch>\n        <Redirect from=\"/home\" to=\"/\" />\n        <Route path=\"/\" exact component={HomePage} />\n        <Route path=\"/people/:personSlug?\" component={PeoplePage} />\n        <Route component={PageNotFound} />\n      </Switch>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}